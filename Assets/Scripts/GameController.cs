using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using Unity.Netcode;

public class GameController : NetworkBehaviour
{
    public static GameController Instance; // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
    public Text gameOverText;
    public GameObject zombiePrefab;
    public Transform spawnAreaCenter;
    public Vector3 spawnAreaSize;
    public Text timerText;
    public Text winText;
    public Text waveText;

    [SerializeField] private float spawnInterval = 1f;
    [SerializeField] private float waveInterval = 5f;

    private int waveNumber = 1;
    private int zombiesPerWave;
    private bool gameEnded = false;

    public GameObject menuButton;
    public GameObject quitButton;
    public GameObject restartButton;



    private NetworkVariable<float> gameTime = new NetworkVariable<float>(
        30f, NetworkVariableReadPermission.Everyone, NetworkVariableWritePermission.Server
    );

      private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
    }

    public override void OnNetworkSpawn()
    {

        if (gameOverText != null)
        {
            gameOverText.gameObject.SetActive(false); // ‚úÖ ‡∏õ‡∏¥‡∏î Game Over Text ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        }

        if (IsServer)
        {
            gameTime.Value = 30f;
            gameEnded = false;
            StartCoroutine(SpawnZombies());
        }

        winText.gameObject.SetActive(false);
        waveText.gameObject.SetActive(true);
        zombiesPerWave = 5;

        menuButton.gameObject.SetActive(false);
        quitButton.gameObject.SetActive(false);
        restartButton.gameObject.SetActive(false);
    }

    private void Update()
    {
        if (!IsServer || gameEnded) return;

        gameTime.Value -= Time.deltaTime;
        UpdateTimerClientRpc(gameTime.Value);

        if (gameTime.Value <= 0)
        {
            gameEnded = true;
            EndGameClientRpc();
        }
    }

    [ClientRpc]
    private void UpdateTimerClientRpc(float time)
    {
        int minutes = Mathf.FloorToInt(time / 60);
        int seconds = Mathf.FloorToInt(time % 60);
        timerText.text = string.Format("{0:00}:{1:00}", minutes, seconds);
    }

    private IEnumerator SpawnZombies()
    {
        while (!gameEnded)
        {
            for (int i = 0; i < zombiesPerWave; i++)
            {
                SpawnZombie();
                yield return new WaitForSeconds(spawnInterval);
            }

            waveNumber++;
            zombiesPerWave += 2;

            UpdateWaveClientRpc(waveNumber);
            yield return new WaitForSeconds(waveInterval);
        }
    }

    [ClientRpc]
    public void ShowGameOverClientRpc()
    {
        if (gameOverText != null)
        {
            gameOverText.gameObject.SetActive(true); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Game Over Text ‡∏ó‡∏∏‡∏Å Client
        }
    }

    private void SpawnZombie()
    {
        if (!IsServer) return; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Client ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Spawn

        Vector3 spawnPosition = new Vector3(
            Random.Range(spawnAreaCenter.position.x - spawnAreaSize.x / 2, spawnAreaCenter.position.x + spawnAreaSize.x / 2),
            spawnAreaCenter.position.y,
            Random.Range(spawnAreaCenter.position.z - spawnAreaSize.z / 2, spawnAreaCenter.position.z + spawnAreaSize.z / 2)
        );

        GameObject newZombie = Instantiate(zombiePrefab, spawnPosition, Quaternion.identity);
        NetworkObject networkObject = newZombie.GetComponent<NetworkObject>();

        if (networkObject != null)
        {
            networkObject.Spawn(true); // ‚úÖ Spawn ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢ Server ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        }
        else
        {
            Debug.LogError("‚ùå NetworkObject ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô ZombiePrefab!");
            return;
        }

        // ‚úÖ ‡∏£‡∏≠ 0.1 ‡∏ß‡∏¥ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Spawn ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡πà‡∏≠‡∏ô Sync ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        StartCoroutine(SyncZombieAfterSpawn(newZombie, spawnPosition));
    }

    private IEnumerator SyncZombieAfterSpawn(GameObject zombie, Vector3 position)
    {
        yield return new WaitForSeconds(0.1f); // ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Spawn ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

        ZombieController zombieController = zombie.GetComponent<ZombieController>();
        if (zombieController != null)
        {
            zombieController.SyncZombieClientRpc(position, Quaternion.identity);
            Debug.Log("‚úÖ Zombie ‡∏ñ‡∏π‡∏Å Sync ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client ‡πÅ‡∏•‡πâ‡∏ß!");
        }
        else
        {
            Debug.LogError("‚ùå ZombieController ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Prefab!");
        }
    }


    [ClientRpc]
    private void UpdateWaveClientRpc(int wave)
    {
        waveText.text = "Wave: " + wave;
    }

    [ClientRpc]
    private void EndGameClientRpc()
    {
        timerText.gameObject.SetActive(false);
        winText.gameObject.SetActive(true);
        Time.timeScale = 0;

        Debug.Log("üî¥ [GameController] ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏î -> Game Over!");


        quitButton.gameObject.SetActive(true);
        menuButton.gameObject.SetActive(true);
        restartButton.gameObject.SetActive(true);
    }

    private void OnDrawGizmos()
    {
        if (spawnAreaCenter != null)
        {
            Gizmos.color = Color.green;
            Gizmos.DrawWireCube(spawnAreaCenter.position, spawnAreaSize);
        }
    }

}